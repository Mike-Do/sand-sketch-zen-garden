# -*- coding: utf-8 -*-
"""Lab6 Template.ipynb

Automatically generated by Colaboratory.

Original file is located at
    https://colab.research.google.com/drive/1_T74fl_Pe6DrKk89I6VDsExQBbNV5mj4
"""

# Set up matplotlib for animations
from matplotlib import rc
rc('animation', html='jshtml')
import numpy as np
import matplotlib.pyplot as plt
import matplotlib.animation as animation
from functools import partial
import numpy as np
from matplotlib import patches

sim = True
all_positions = []
if not sim:
  crazyflies = groupState.crazyflies
  timeHelper = groupState.timeHelper
  cf = crazyflies[0]
Hz = 20

a=.5
n=2
d=1
# TODO: Parametric Equations
# add your desired parametric equations
def fx(t):

    return 0.5*(a * np.cos(n / d * t) * np.cos(t))

def fy(t):

    return 0.5*(a * np.cos(n / d * t) * np.sin(t))

def fz(t):
    # Don't touch for now, you can experiment with height and dropping paint another time.
    return 1

#TODO: Step 2, Set appropriate start and end times (min and max values of t)
start_time = 0
end_time = 30

#TODO: Step 3, set appropriate time scaling factor
time_stretch_factor = 2

# TODO: offset of paint (x, y)
paint_offset = (0.70, 0)

# TODO: Canvas coordinates
canvas_corners = [(-0.418,-0.597), (-0.409, -1.147), (0.299, -1.133), (0.286, -0.585)]

# TODO: Where do you want to start?
starting_position = (0.1, -0.7, 1)

canvas_x_min = min([point[0] for point in canvas_corners])
canvas_x_max = max([point[0] for point in canvas_corners])
canvas_y_min = min([point[1] for point in canvas_corners])
canvas_y_max = max([point[1] for point in canvas_corners])

# Stretch end time by time stretch factor
end_time = end_time * time_stretch_factor

# Timesteps is an array of evenly spaced numbers from start to end 1/Hz apart
timesteps = np.arange(start_time, end_time, 1/Hz)


# Takeoff, go to start position
if not sim:
  cf.takeoff(1., 3.)
  timeHelper.sleep(3.5)
  cf.goTo(starting_position, 0, 3.0)
  timeHelper.sleep(3.0)
  cf.setParam('servoAngle', 30) # Set servo angle to 30 (open)

# Loop through every timestep
for t in timesteps:
    # Transform time back to original range
    t = t / time_stretch_factor

    # Get position from trajectory
    position = (fx(t), fy(t), fz(t))

    # subtract out position of start of trajectory
    position = position - np.array((fx(timesteps[0]), fy(timesteps[0]), fz(timesteps[0])))

    # Add initial position of crazyflie
    position = position + np.array(starting_position)
    if not sim:
      # Send command to crazyflie
      cf.cmdPosition(position)
      # Sleep for 1/Hz seconds
      timeHelper.sleepForRate(Hz)

    # Keep track of position for plotting purposes
    all_positions.append(position)

if not sim:
  # Tell each crazyflie we are stopping streaming low-level commands
  for cf in crazyflies:
      cf.notifySetpointsStop()

  # Go Home and land
  cf.setParam('servoAngle', 0) # Close servo
  cf.goTo((0., 0., 1.), 0., 5.0)
  timeHelper.sleep(5.5)
  cf.land(0., 3.)
  timeHelper.sleep(5.5)

"""# Animation!

Animate the crazyflie's XY-position and the canvas' location (red rectangle).
"""

fig = plt.gcf()
ax = plt.gca()


def frame(positions, i):
  x = positions[i][0]
  y = positions[i][1]
  ax.clear()
  ax.set_xlim([-3, 3])
  ax.set_ylim([-3, 3])
  ax.set_xlabel("X")
  ax.set_ylabel("Y")
  plot = ax.scatter(x, y)
  ax.add_patch(patches.Rectangle((canvas_x_min, canvas_y_min), canvas_x_max-canvas_x_min, canvas_y_max - canvas_y_min, linewidth=1, edgecolor='r', facecolor='none'))

  return plot

ani = animation.FuncAnimation(fig, partial(frame, all_positions), frames=len(all_positions), interval=1/Hz*1000, blit=False, repeat=True)
ani

